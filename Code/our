
	.data
a_:	.word 0
b_:	.word 0

	.text 			# The .text assembler directive indicates
	.globl f_		# The following is the code (as oppose to data)
f_:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 8		# Make space for the locals
# Prologue ends

	li $v0, 2
	sw $v0, 12($fp)
	li.d $f2, 1.00
	mov.d $f0, $f2
	j epilogue_f_

# Epilogue Begins
epilogue_f_:
	add $sp, $sp, 8
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends


	.text 			# The .text assembler directive indicates
	.globl g_		# The following is the code (as oppose to data)
g_:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 12		# Make space for the locals
# Prologue ends

	li $v0, 10
	sw $v0, b_
	j epilogue_g_

# Epilogue Begins
epilogue_g_:
	add $sp, $sp, 12
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends


	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 16		# Make space for the locals
# Prologue ends

	li $v0, 5
	li $t0, 6
	add $t1, $v0, $t0
	li $v0, 9
	add $t0, $t1, $v0
	sw $t0, 0($sp)
	li.d $f2, 4.00
	s.d $f2, -4($sp)
	sub $sp, $sp, 12
	jal g_
	add $sp, $sp, 12
	li $v0, 6
	sw $v0, 0($sp)
	sub $sp, $sp, 4
	jal f_
	add $sp, $sp, 4
	mov.d $f2, $f0
	li.d $f2, 6.50
	s.d $f2, 0($fp)
	li $v0, 6
	sw $v0, 0($sp)
	sub $sp, $sp, 4
	jal f_
	add $sp, $sp, 4
	mov.d $f2, $f0
	s.d $f2, 0($fp)
	li $v0, 5
	sw $v0, 0($sp)
	sub $sp, $sp, 4
	jal f_
	add $sp, $sp, 4
	mov.d $f2, $f0
	s.d $f2, 0($fp)
	li $v0, 3
	l.d $f12, 0($fp)
	syscall
	li $v0, 1
	lw $a0, a_
	syscall

# Epilogue Begins
epilogue_main:
	add $sp, $sp, 16
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends

